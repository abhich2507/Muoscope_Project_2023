#define MyClass_cxx
#include "MyClass.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>

void MyClass::Loop()
{
   fstream outFile("test11.csv",ios::out);

    char nameE[15], titleE[20];
   TH1F *HlistE[4];      // create an array of Histograms
   TH1F* hStationNumberE;                 // create a pointer to a histogram
   // make  8 histograms and add them to the object array
   for (Int_t i = 0; i < 4; i++) {
      sprintf(nameE,"hStationNumberE%d",i);
      sprintf(titleE,"station:%d",i);
      hStationNumberE = new TH1F(nameE,titleE,100,-1,5);
      hStationNumberE->GetXaxis()->SetTitle("Deposited Energy[MeV]");
      hStationNumberE->GetYaxis()->SetTitle("numHits");
      HlistE[i]=hStationNumberE;
   }

 char nameX[15], titleX[20];
   TH1F *HlistX[4];      // create an array of Histograms
   TH1F* hStationNumberX;                 // create a pointer to a histogram
   // make  8 histograms and add them to the object array
   for (Int_t i = 0; i < 4; i++) {
      sprintf(nameX,"hStationNumberX%d",i);
      sprintf(titleX,"station:%d",i);
      hStationNumberX = new TH1F(nameX,titleX,100,-260,260);
      hStationNumberX->GetXaxis()->SetTitle("mm");
      hStationNumberX->GetYaxis()->SetTitle("numHits");
      HlistX[i]=hStationNumberX;
   }

    char nameY[15], titleY[20];
   TH1F *HlistY[10];      // create an array of Histograms
   TH1F* hStationNumberY;                 // create a pointer to a histogram
   // make  8 histograms and add them to the object array
   for (Int_t i = 0; i < 4; i++) {
      sprintf(nameY,"hStationNumberY%d",i);
      sprintf(titleY,"station:%d",i);
      hStationNumberY = new TH1F(nameY,titleY,100,-260,260);
      hStationNumberY->GetXaxis()->SetTitle("mm");
      hStationNumberY->GetYaxis()->SetTitle("numHits");
      HlistY[i]=hStationNumberY;
   }

   
 
 char nameZ[15], titleZ[20];
   TH1F *HlistZ[10];      // create an array of Histograms
   TH1F* hStationNumberZ;                 // create a pointer to a histogram
   // make  8 histograms and add them to the object array
   for (Int_t i = 0; i < 4; i++) {
      sprintf(nameZ,"hStationNumberZ%d",i);
      sprintf(titleZ,"station:%d",i);
      hStationNumberZ = new TH1F(nameZ,titleZ,100,-10,350);
      hStationNumberZ->GetXaxis()->SetTitle("mm");
      hStationNumberZ->GetYaxis()->SetTitle("numHits");
      HlistZ[i]=hStationNumberZ;
   }

       TCanvas *c1 = new TCanvas("c1","Histograms related Planes edep ");
        c1->Divide(2,2);
       TCanvas *c2 = new TCanvas("c2", "Histograms related to the Planes posZ ");
       c2->Divide(2,2);
       TCanvas *c3 = new TCanvas("c3", "Histograms related to  the Planes posY ");
       c3->Divide(2,2);
       TCanvas *c4 = new TCanvas("c4", "Histograms related to  the Planes posX");
       c4->Divide(2,2);
   
   
   // auto  histPDG = new TH1F("histPDG","HitPDG",100,-20,20);
  
  
  
//   In a ROOT session, you can do:
//      root> .L MyClass.C
//      root> MyClass t
//      root> t.GetEntry(12); // Fill t data members with entry number 12
//      root> t.Show();       // Show values of entry 12
//      root> t.Show(16);     // Read and show values of entry 16
//      root> t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch
   if (fChain == 0) return;

   Long64_t nentries = fChain->GetEntriesFast();

   Long64_t nbytes = 0, nb = 0;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      // if (Cut(ientry) < 0) continue;
      
      	for (int j=0; j<4; j++) {
	    double E=0.;
      double Z=0.;
      double Y=0.;
      double X=0.;
      double t=0.;
      double H=0.;
	  
      if (NScintHit!=0){

     
      for(int i=0; i< NScintHit; i++){
	if(abs(HitPDG[i])==13){
	
         if (  ScintHitStation[i]==j){
	   
	t+=1.;
	Z+=(ScintHitPosZ[i]);
	Y+=(ScintHitPosY[i]);
	X+=(ScintHitPosX[i]);
       	H+=HitPDG[i];
	E+=ScintHitE[i];
	//	cout<<NScintHit<<endl;
	          }//if pdg=13

	       }//ScintHitStation ==0
      }//for loop station
          }//for loop hits
     
    
      if(t!=0){
      double Zavg= Z/t;
      double Yavg= Y/t;
      double Xavg= X/t;
      double Havg= H/t;//caution: loosly defined
      
      cout<<"X ="<<X<<endl;
	cout<<"t ="<<t<<endl;
     	cout<<Xavg<<endl;
      HlistZ[j]->Fill(Zavg);
      HlistX[j]->Fill(X);
      HlistY[j]->Fill(Y);
      // HlistPDG[j]->Fill(Havg);
      HlistE[j]->Fill(E);
              }
        }//if NScintHit !=0
      
	
   }
      for (int i=0; i<4; i++) {
	  
       c1->cd(i+1);
       gPad->DrawFrame(0,0,1,1);
       HlistE[i]->Draw();

        c2->cd(i+1);
       gPad->DrawFrame(0,0,1,1);
       HlistZ[i]->Draw();

        c3->cd(i+1);
       gPad->DrawFrame(0,0,1,1);
       HlistY[i]->Draw();

        c4->cd(i+1);
       gPad->DrawFrame(0,0,1,1);
       HlistX[i]->Draw();
       }
}

