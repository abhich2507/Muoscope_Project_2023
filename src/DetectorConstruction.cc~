//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
/// \file DetectorConstruction.cc
/// \brief Implementation of the B1::DetectorConstruction class

#include "DetectorConstruction.hh"
#include "SensitiveDetector.hh"
#include "G4RunManager.hh"
#include "G4NistManager.hh"
#include "G4SDManager.hh"
#include "G4Box.hh"
#include "G4Cons.hh"
#include "G4Orb.hh"
#include "G4Sphere.hh"
#include "G4Trd.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4SystemOfUnits.hh"
#include "G4UserLimits.hh"


namespace B1
{

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

DetectorConstruction::DetectorConstruction()
{}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

DetectorConstruction::~DetectorConstruction()
{}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* DetectorConstruction::Construct()
{
  // Get nist material manager
  G4NistManager* nist = G4NistManager::Instance();

  // Envelope parameters
  //
  G4double env_sizeXY = 70*cm, env_sizeZ = 70*cm;
  G4Material* env_mat = nist->FindOrBuildMaterial("G4_WATER");


 
  //creating CO2
  
G4double a = 12*g/mole;  //carbon
G4int z;
G4Element* elC = new G4Element("Carbon", "C", z=6, a);
 
 a = 16.00*g/mole;     //
G4Element* elO = new G4Element("Oxygen", "O", z=8, a);


G4double density;
G4int n;
G4Material* CO2 = new G4Material("Carbon Dioxide", density=1.87*g/cm3 ,n=2);
G4int nAtoms ;
CO2->AddElement(elC, nAtoms=1); 
CO2->AddElement(elO, nAtoms=2);

 
a = 39.948*g/mole;
 G4Element* elAr = new G4Element("Argon","Ar", z=18, a);

G4double ncomponents = 2;
G4Material* Aerog = new G4Material("Aerogel",density=1.83*kg/m3,ncomponents);
G4double fractionmassAr=70*perCent;
G4double fractionmassCO2=30*perCent;
Aerog->AddElement(elAr, fractionmassAr);
Aerog->AddMaterial(CO2, fractionmassCO2);


 a= 102.032*g/mole;
 density = 0.00425 * g/cm3; // Set the desired density for R134a
  // Create the gas mixture material
 G4Material* r134a = new G4Material("r134a", density, 3);

   // Add the component to the gas mixture
  r134a->AddElement(nist->FindOrBuildElement("C"), 2); // C2
  r134a->AddElement(nist->FindOrBuildElement("H"), 2); // H2
  r134a->AddElement(nist->FindOrBuildElement("F"), 4); // F4

  //butane
  a=58.124*g/mole;
   G4Material* butane = new G4Material("butane", 2.489 *mg/cm3, 2);

    // Add the components to the butane material
    butane->AddElement(nist->FindOrBuildElement("C"), 4); // Carbon (C)
    butane->AddElement(nist->FindOrBuildElement("H"), 10); // Hydrogen (H)


    //SF6
     density = 6.43*mg/cm3;
    G4Material* hexafluoride = new G4Material("hexafluoride",density,2);
    hexafluoride->AddElement(nist->FindOrBuildElement("S"),1);
    hexafluoride->AddElement(nist->FindOrBuildElement("F"),6);
    
    //mixture of r134a(95%) + Butane(5%)
    G4Material* Aerog1 = new G4Material("Aerogel1",4.18364 *mg/cm3, 3);
    Aerog1->AddMaterial(r134a, 95.2*perCent);
    Aerog1->AddMaterial(butane,4.5*perCent);
    Aerog1->AddMaterial(hexafluoride,0.3*perCent);
   

 

 G4Material*  sc = nist->FindOrBuildMaterial("G4_PLASTIC_SC_VINYLTOLUENE");///scintillator

  // Option to switch on/off checking of volumes overlaps
  //
  G4bool checkOverlaps = true;

  //
  // World
  //
  G4double world_sizeXY = 2*env_sizeXY;
  G4double world_sizeZ  = 2*env_sizeZ;
  G4Material* world_mat = nist->FindOrBuildMaterial("G4_AIR");

  G4Box* solidWorld =
    new G4Box("World",                       //its name
      0.5*world_sizeXY, 0.5*world_sizeXY, 0.5*world_sizeZ);     //its size

  G4LogicalVolume* logicWorld =
    new G4LogicalVolume(solidWorld,world_mat,  "World");            //its name

  G4VPhysicalVolume* physWorld =
    new G4PVPlacement(0,                     //no rotation
                      G4ThreeVector(),       //at (0,0,0)
                      logicWorld,            //its logical volume
                      "World",               //its name
                      0,                     //its mother  volume
                      false,                 //no boolean operation
                      0,                     //copy number
                      checkOverlaps);        //overlaps checking

  //
  // Envelope
  //
  G4Box* solidEnv =
    new G4Box("Envelope",                    //its name
        0.5*env_sizeXY, 0.5*env_sizeXY, 0.5*env_sizeZ); //its size

  G4LogicalVolume* logicEnv =
    new G4LogicalVolume(solidEnv,            //its solid
                        world_mat,             //its material
                        "Envelope");         //its name

     new G4PVPlacement(0,                       //no rotation
                    G4ThreeVector(),         //at (0,0,0)
                    logicEnv,                //its logical volume
                    "Envelope",              //its name
                    logicWorld,              //its mother  volume
                    false,                   //no boolean operation
                    0,                       //copy number
                    checkOverlaps);          //overlaps checking
  
  G4int fNbOfPlanes = 4;
  G4double z0=0.5*cm;
  G4double z1=13.5*cm;
  G4double z_pos;
 fLogicPlane = new G4LogicalVolume*[fNbOfPlanes];

  //Building four parrallel planes
  for (G4int copyNo=0; copyNo<fNbOfPlanes; copyNo++) {
    if(copyNo<2){ 
       z_pos=  z0 + (3*cm)*copyNo;}

    if(copyNo>=2){ 
        z_pos=  z1 + (3*cm)*copyNo;}
    
  G4ThreeVector pos1 = G4ThreeVector(0, 2*cm, z_pos);

  //a 2D plane
  
   G4Box * solidShape1  =
     new G4Box("Shape1",
	       (50/2)*cm,
	       (50/2)*cm,
	       (0.1/2)*cm);
 
   fLogicPlane[copyNo]=
    new G4LogicalVolume(solidShape1,         //its solid
                        Aerog,          //its material
                        "Shape1");           //its name

  new G4PVPlacement(0,                       //no rotation
                    pos1,                    //at position
		    // logicShape1,
		    fLogicPlane[copyNo],    //its logical volume
                    "Shape1",                //its name
                    logicEnv,                //its mother  volume
                    false,                   //no boolean operation
                    copyNo,                       //copy number
                    checkOverlaps);          //overlaps checking


  fScoringVolume = fLogicPlane[copyNo];
}

  G4ThreeVector pos4 = G4ThreeVector(0,2*cm, 10*cm);

  G4Box * solidShape4  = new G4Box("Shape4", (10/2)*cm, (10/2)*cm, (10/2)*cm);
  G4double A = 207.2 *g/mole;
  density = 11.35 *g/cm3;
 G4Material* Lead =  new G4Material("Lead", z=82., A, density);
 
  G4LogicalVolume* logicShape4 = new G4LogicalVolume(solidShape4,Lead, "Shape4" );
   new G4PVPlacement(0,                       //no rotation
                    pos4,                    //at position
                    logicShape4,             //its logical volume
                    "Shape4",                //its name
                    logicEnv,                //its mother  volume
                    false,                   //no boolean operation
                    0,                       //copy number
                    checkOverlaps);          //overlaps checking

   
  //always return the physical World
  return physWorld;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
  void DetectorConstruction::ConstructSDandField()
  {
     G4String SensitiveDetectorname = "SensitiveDetectorname";
   auto aSensitiveDetector = new SensitiveDetector(SensitiveDetectorname, "SensitiveDetectorHitsCollection");
   
   G4SDManager::GetSDMpointer()->AddNewDetector(aSensitiveDetector);
   SetSensitiveDetector("Shape1",aSensitiveDetector, true); 
  }

  
  void DetectorConstruction::SetMaxStep(G4double maxStep)
  {
    if ((fStepLimit)&&(maxStep>0.)) fStepLimit->SetMaxAllowedStep(maxStep);
  }


  
  void DetectorConstruction::SetCheckOverlaps(G4bool checkOverlaps)
{
  fCheckOverlaps = checkOverlaps;
}

}
