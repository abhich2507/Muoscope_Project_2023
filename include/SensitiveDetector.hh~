
#ifndef B1SensitiveDetector_h
#define B1SensitiveDetector_h 1
#include "G4VSensitiveDetector.hh"
#include "SensitiveDetectorHit.hh"
#include "G4AnalysisManager.hh"
#include <vector>

class G4Step;
class G4HCofThisEvent;
class G4TouchableHistory;
namespace B1
{

  // class G4Step;
  //class G4HCofThisEvent;
  //class G4TouchableHistory;

  class SensitiveDetector: public G4VSensitiveDetector
{
public:
  SensitiveDetector( const G4String& name, const G4String& hitsCollectionName );
 ~SensitiveDetector() override =default;

  // methods from
 virtual void Initialize( G4HCofThisEvent *hitscollection ) ;
 virtual G4bool ProcessHits( G4Step* aStep, G4TouchableHistory* ) ;
 virtual void EndOfEvent( G4HCofThisEvent* hitsCollection )  ;
  
private:
SensitiveDetectorHitsCollection* fHitsCollection = nullptr;
G4int fHCID;
};
}
#endif
